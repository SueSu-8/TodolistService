# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id=None, title=None, description=None, due_date=None, completed=None):  # noqa: E501
        """Task - a model defined in OpenAPI

        :param task_id: The task_id of this Task.  # noqa: E501
        :type task_id: str
        :param title: The title of this Task.  # noqa: E501
        :type title: str
        :param description: The description of this Task.  # noqa: E501
        :type description: str
        :param due_date: The due_date of this Task.  # noqa: E501
        :type due_date: date
        :param completed: The completed of this Task.  # noqa: E501
        :type completed: bool
        """
        self.openapi_types = {
            'task_id': str,
            'title': str,
            'description': str,
            'due_date': date,
            'completed': bool
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'title': 'title',
            'description': 'description',
            'due_date': 'dueDate',
            'completed': 'completed'
        }

        self._task_id = task_id
        self._title = title
        self._description = description
        self._due_date = due_date
        self._completed = completed

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this Task.


        :return: The task_id of this Task.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Task.


        :param task_id: The task_id of this Task.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def title(self):
        """Gets the title of this Task.


        :return: The title of this Task.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.


        :param title: The title of this Task.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Task.


        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.


        :param description: The description of this Task.
        :type description: str
        """

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this Task.


        :return: The due_date of this Task.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Task.


        :param due_date: The due_date of this Task.
        :type due_date: date
        """

        self._due_date = due_date

    @property
    def completed(self):
        """Gets the completed of this Task.


        :return: The completed of this Task.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Task.


        :param completed: The completed of this Task.
        :type completed: bool
        """

        self._completed = completed
